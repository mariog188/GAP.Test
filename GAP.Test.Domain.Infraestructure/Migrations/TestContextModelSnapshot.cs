// <auto-generated />
using System;
using GAP.Test.Domain.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GAP.Test.Domain.Infraestructure.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GAP.Test.Domain.Model.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(30);

                    b.Property<int>("Cedula")
                        .HasColumnName("cedula");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnName("fechanacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("GAP.Test.Domain.Model.Poliza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(30);

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnName("fechainicio");

                    b.Property<int>("IdCliente");

                    b.Property<int>("IdTipoCubrimiento");

                    b.Property<int>("IdTipoRiesgo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(30);

                    b.Property<int>("PeriodoCobertura")
                        .HasColumnName("periodocobertura");

                    b.Property<decimal>("Precio")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdTipoCubrimiento");

                    b.HasIndex("IdTipoRiesgo");

                    b.ToTable("poliza");
                });

            modelBuilder.Entity("GAP.Test.Domain.Model.TipoCubrimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(30);

                    b.Property<double>("Porcentaje");

                    b.HasKey("Id");

                    b.ToTable("tipocubrimiento");
                });

            modelBuilder.Entity("GAP.Test.Domain.Model.TipoRiesgo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("tiporiesgo");
                });

            modelBuilder.Entity("GAP.Test.Domain.Model.Poliza", b =>
                {
                    b.HasOne("GAP.Test.Domain.Model.Cliente", "Cliente")
                        .WithMany("Polizas")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GAP.Test.Domain.Model.TipoCubrimiento", "TipoCubrimiento")
                        .WithMany("Polizas")
                        .HasForeignKey("IdTipoCubrimiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GAP.Test.Domain.Model.TipoRiesgo", "TipoRiesgo")
                        .WithMany("Polizas")
                        .HasForeignKey("IdTipoRiesgo")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
